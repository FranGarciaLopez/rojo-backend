/**********************************************************************
    - CRUD OPERATIONS ON EVENTS (new entity for events available on mognoDB: events_v2)

    -   End points of the eventManager route:
        * GET: http://localhost:3000/eventManager/getEvents/
        * GET: http://localhost:3000/eventManager/getSingleEvent/
        * POST: http://localhost:3000/eventManager/newEvent/
        * PUT: http://localhost:3000/eventManager/updateEvent/
        * DELETE: http://localhost:3000/eventManager/deleteEvent/
***********************************************************************/
    /*** getEvents *****************************************************
     * answer back with all the events organized from the event manager with the id specified in the field.
     * it require also other 3 fields.
     * the event manager can settle those fields in the dashboard, section ACTIONS.
     *  - published: can be true or false
     *  - confirmed: can be true or false
     *  - closed: can be true or false
     * 
     * GET: http://localhost:3000/eventManager/getEvents/
     * 
     * { 
            "idEventManager" : "677bd2e57d0c42a398e374f2",
            "published"      : "true",
            "confirmed"      : "true",
            "closed"         : "true"
        }
     *******************************************************************/
     /*** getSingleEvent *****************************************************
     * answer back with all the information available on the DB of the event.
     * it require the idEvent.
     * 
     * GET: http://localhost:3000/eventManager/getSingleEvent/
     * 
     * { 
            "idEvent" : "67d128d89591d0fbf710f057"
        }
     *******************************************************************/
     /*** newEvent ********************************************
     * route to insert a a new event into the database.
     * the event manager will use it in the NEW EVENT page.
     * 
     * the required fields are:
     *          title, description, idEventManager 
     *                   if (!eventData.title || !eventData.description || !eventData.idEventManager) {
     * 
     * the fiedls accepted are:
     *          const allowedFields = ["title", "category", 
     *              "city", "budget", "dateAndTime", 
     *              "description", "location", "idEventManager", 
     *              "published", "confirmed", "closed", 
     *              "dateTime", "location_str", "photos"]
     * 
     * if inserted, dateAndTime must be in a Date format:
     *                      eventData.dateTime = new Date(eventData.dateTime);
     *                          if (isNaN(eventData.dateTime.getTime())) {
     * 
     * it returns:
     *          - 'Missing required fields' : if any of the required fields is not present
     *          - 'Invalid date format for dateTime' : if the dateAndTime field is not in the proper format
     *          - 'Done' + the uploaded data + id event:  if the new event is successfully uploaded
     *          - 'Server error' : if any problem
     * 
     * POST: http://localhost:3000/eventManager/newEvent/
     * { 
            "idEvent" : "67cc8017f0bacdb366c15f5c",
            "idEventManager" : "677bd2e57d0c42a398e374f2",
            "description" : "New description to test newEvent",
            "budget": "1000",
            "city" : "C1",
            "title" : "another new title test"
        }
     *******************************************************************/
    /*** updateEvent ********************************************
     * will be used by the event manager in the EVENT PAGE,
     *  
     * it require the idEvent field.
     * 
     * the fiedls accepted are:
     *          const allowedFields = ["title", "category", 
     *              "city", "budget", "dateAndTime", 
     *              "description", "location", "idEventManager", 
     *              "published", "confirmed", "closed", 
     *              "dateTime", "location_str", "photos"]
     * 
     * if inserted, dateAndTime must be in a Date format:
     *                      eventData.dateTime = new Date(eventData.dateTime);
     *                          if (isNaN(eventData.dateTime.getTime())) {
     * 
     * it returns:
     *          - 'Event ID is required' : if idEvent field is not present
     *          - 'Invalid date format for dateTime' : if the dateAndTime field is not in the proper format
     *          - 'Event not found' : if the event is not available in mongoDB
     *          - 'Event updated successfully' : if the operation succed
     *          - 'Error updating event:' : if any other problems
     * 
     * PUT: http://localhost:3000/eventManager/updateEvent/
     * { 
            "idEvent" : "67cc8017f0bacdb366c15f5c",
            "description" : "New description to test update event",
            "budget": "1000000",
        }     * 
    ***********************************************************/
    /*** deleteEvent ********************************************
     * reserved for admin uses.
     *  
     * it require the idEvent field.
     * 
     * it returns:
     *          - 'Event ID is required' : if idEvent field is not present
     *          - 'Event not found' : if the event is not available in mongoDB
     *          - 'Event deleted successfully' : if the operation succed
     *          - 'Internal Server Error' : if any other problems
     * 
     * DELETE: http://localhost:3000/eventManager/deleteEvent/
     * { 
            "idEvent" : "67cc8017f0bacdb366c15f5c"
        }    
    ***********************************************************/